node {
    try {
    notifyBuild('STARTED')
    stage('Checkout'){
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'bbc9887a-b8af-4e67-a8c4-25e313f09ef5', url: 'https://github.com/Techolution/tix-gateway.git/']]])
    }

    stage("Build application war file"){
    echo 'Starting Build'
    sh "git rev-parse HEAD > commit-id"                        
    commit_id = readFile('commit-id')
    sh "echo $commit_id"
    sh "mvn clean install"
    }
    
    stage("SONARQUBE Analysis"){
    echo 'Starting Analysis'
    sh "mvn sonar:sonar -Dsonar.host.url=http://tix-sonarqube-server:8080 -Dsonar.login=1b5b7ad7a62a7e19c201f6fd57248d76600ad812"
    }
    
    stage("Build application Docker Image"){
    echo 'Starting Build Image'
    sh "docker build -t tix-gateway ."
    sh "docker tag tix-gateway asia.gcr.io/prismatic-fact-201508/tix-gateway:build-id-${BUILD_NUMBER}"
    sh "docker tag tix-gateway asia.gcr.io/prismatic-fact-201508/tix-gateway:latest"
    }
    
    stage 'Push Docker Image to GCR'
    docker.withRegistry('https://asia.gcr.io', 'gcr:prismatic-fact-201508') {
        sh "docker push asia.gcr.io/prismatic-fact-201508/tix-gateway:build-id-${BUILD_NUMBER}"
        sh "docker push asia.gcr.io/prismatic-fact-201508/tix-gateway:latest"
    }
    
    stage ("Run app on Kubernetes"){
     echo "Connecting to Active cluster at development NameSpace : tix-active (development)"
     sh "gcloud container clusters get-credentials tix-active --region asia-southeast1"
     //sh "kubectl delete deployment tix-gateway"
     //sh "kubectl run tix-gateway --port=8534 --image=asia.gcr.io/prismatic-fact-201508/tix-gateway:$commit_id"
     sh "chmod +x deploy/deployApp.sh"
     sh "deploy/deployApp.sh dev" 
     }
        
 } catch (e) {
     // If there was an exception thrown, the build failed
     currentBuild.result = "FAILED"
     throw e
   } finally {
   
    // Create Gateway Image Tags Property File for reference for PROD Build
    def valuesT = sh (script: "gcloud container images list-tags asia.gcr.io/prismatic-fact-201508/tix-gateway --limit=5 | awk '{print \$2}' ", returnStdout: true)
    valuesT = valuesT.replaceAll('\\n',',')
    valuesT = valuesT.replaceAll('latest,','')
    valuesT = valuesT.replaceAll('production,','')
    valuesT = valuesT.replaceAll('TAGS,','TAGS = ')
    sh "echo ${valuesT} > /tmp/gateway_imagestags.properties"
   
     // Success or failure, always send notifications
     notifyBuild(currentBuild.result)
   }
}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "Build ${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = "Jenkins Build ${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' Check console output at ${env.BUILD_URL} "
 
  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
  //emailext body: 'A Test EMail', recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: 'Test'
  emailext subject: subject, body: details, recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]
}
