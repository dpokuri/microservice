node {
def Deploy_ENV = 'PROD'
  try {
    notifyBuild('STARTED')
    stage('Checkout'){
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'bbc9887a-b8af-4e67-a8c4-25e313f09ef5', url: 'https://github.com/Techolution/booking-promocode-be.git']]])
    }
    
    stage('Deploy to PRODUCTION - Active_Region') {
    timeout(time: 3, unit: 'MINUTES') {
    input message: "Approve deployment of IMAGE_TAG booking-Promocode-BE : ${IMAGE_TAG} to PRODUCTION ?"
    }
                       
    echo "the application is Being Deployed"
    echo "Connecting to Active cluster : booking-active"
    sh "gcloud container clusters get-credentials booking-active --region asia-southeast1"
    sh "chmod +x deploy/deployApp.sh"
    sh "deploy/deployApp.sh"  
    echo 'the application is deployed !'
    }
    
    stage('Acceptance sanity check') {
    // give some time till the deployment is done, so we wait 45 seconds
    sleep(45)
    sh " echo  '*******  some tests are run  ********' "
    sh "kubectl get pods | grep booking-promocode-be"
    }

    stage('Update Image with Production tag') {
    sh "gcloud container images add-tag asia.gcr.io/prismatic-fact-201508/booking-promocode-be:${IMAGE_TAG} asia.gcr.io/prismatic-fact-201508/booking-promocode-be:production"
    }
    
    stage('Deploy to PRODUCTION - DR-Region') {
    echo "the application is Being Deployed"
    echo "Connecting to DR cluster : booking-dr"
    sh "gcloud container clusters get-credentials booking-dr --region asia-east1"
    sh "chmod +x deploy/deployApp.sh"
    sh "deploy/deployApp.sh" 
    echo 'the application is deployed !'
    }

    stage('Acceptance sanity check for DR Region') {
    // give some time till the deployment is done, so we wait 45 seconds
    sleep(45)
    sh " echo  '*******  some tests are run  ********' "
    sh "kubectl get pods | grep booking-promocode-be"
    }
  } catch (e) {
     // If there was an exception thrown, the build failed
     currentBuild.result = "FAILED"
     throw e
   } finally {
     // Success or failure, always send notifications
     notifyBuild(currentBuild.result)
   }
}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "Build ${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = "Jenkins Build ${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' Check console output at ${env.BUILD_URL} "
 
  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
  //emailext body: 'A Test EMail', recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: 'Test'
  emailext subject: subject, body: details, recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]

}
